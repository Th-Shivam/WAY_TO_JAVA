public class QuickSortExample {

    // Function to partition the array
    static int partition(int arr[], int low, int high) {
        int pivot = arr[high];  // pivot element (last element liya)
        int i = (low - 1);      // smaller element ka index

        for (int j = low; j < high; j++) {
            // agar current element pivot se chhota ya barabar hai
            if (arr[j] <= pivot) {
                i++;
                // swap arr[i] and arr[j]
                int temp = arr[i];
                arr[i] = arr[j];
                arr[j] = temp;
            }
        }

        // swap arr[i+1] and arr[high] (pivot element)
        int temp = arr[i + 1];
        arr[i + 1] = arr[high];
        arr[high] = temp;

        return i + 1; // pivot ka final position return
    }

    // Function to perform quicksort
    static void quickSort(int arr[], int low, int high) {
        if (low < high) {
            int pi = partition(arr, low, high);  // partition index

            // recursively sort left and right parts
            quickSort(arr, low, pi - 1);
            quickSort(arr, pi + 1, high);
        }
    }

    // Driver code
    public static void main(String args[]) {
        int arr[] = {10, 7, 8, 9, 1, 5};
        int n = arr.length;

        System.out.println("Before Sorting:");
        for (int x : arr) System.out.print(x + " ");

        quickSort(arr, 0, n - 1);

        System.out.println("\n\nAfter Quick Sort:");
        for (int x : arr) System.out.print(x + " ");
    }
}